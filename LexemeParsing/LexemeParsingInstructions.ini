// MACROS
// #a - any symbol
#w a z
#W A Z
#o 0 7
#d 0 9
#h a f
#H A F
#n #10 // 10 is \n
// Macros name must consist of 1 char A-Z or a-z

// ADDRESS LAYOUT

// 0 - 999 reserved
// 1000 - 1999 - errors

// 2000 - 2099 constants
// 2100 - 2999 temp for constants

// 3000 - 3099 operators
// 3100 - 3999 temp for operators

// 4000 - 4999 keywords
// 5000 - 5999 variable names
// 6000 - 8999 temp for keywords and variables

// 9000 - 9999 common uses 

// Start parsing lexeme from state 0 and jump into your state
// If no matches from current state is found, 
// lexeme will be saved with code of current state 
// and new state is set to 0 

// Use the following format: 
// CUR_STATE MATCH_PATTERN NEW_STATE
// For example: 
// 0 xyz 4500
// 0 i 4501 // i..
// 4000 #wWd 4500 // if..
// 4500 #wWd 4500
// 4501 f 4000 // if or if..
// 4501 #wWd 4500 // iz..

// All instructions must be sorted by CUR_STATE

// HOW TO USE CHAR PATTERNS
// AB - symbol A or symbol B
// # - symbol '#'
// #AB - any symbol from (macro A + macro B)
// ALL CHAR PATTERNS MUST BE PLACED AFTER ALL SIMPLE CHAR SEQUENCES OF THIS STATE
// For example, this is not allowed: 
//     0 #wW 1
//     0 abc 2

// LEXEME PARSING INSTRUCTIONS:
