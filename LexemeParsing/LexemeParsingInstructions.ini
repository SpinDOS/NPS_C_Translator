// MACROS
#w a z
#W A Z
#o 0 7
#d 0 9
#h a f
#H A F
#n #10 // 10 is \n
#p #95 // 95 is '_'
// Macros name must consist of 1 char A-Z or a-z

// ADDRESS LAYOUT

// 0 - 999 reserved
// 1000 - 1999 - errors

// 2000 - 2099 constants
// 2100 - 2999 temp for constants

// 3000 - 3099 operators
0 { 3000
0 } 3001
0 ( 3004
0 ) 3005
0 [ 3006
0 ] 3007
0 . 3008
0 ! 3014
0 ~ 3015
0 * 3018
0 / 3019
0 % 3020
0 + 3021
3021 + 3002 // ++
0 - 3022
3022 - 3003 // --
3022 > 3009 // ->
0 < 3025
3025 = 3026 // <=
3025 < 3023 // <<
0 > 3027
3027 = 3028 // >=
3027 > 3024 // >>
3014 = 3033 // !=
0 & 3034
0 ^ 3035
0 | 3036
3034 & 3035 // &&
3036 | 3038 // ||
0 ? 3039
0 : 3040
0 = 3041
3041 = 3029 // ==
0 , 3042

// 3100 - 3999 temp for operators

// 4000 - 4999 keywords
// 5000 - 5999 variable names
// 6000 - 8999 temp for keywords and variables

// 9000 - 9999 common uses 

// Start parsing lexeme from state 0 and jump into your state
// If no matches from current state is found, 
// lexeme will be saved with code of current state 
// and new state is set to 0 

// Use the following format: 
// CUR_STATE MATCH_PATTERN NEW_STATE
// For example: 
// 0 xyz 4500
// 0 i 4501 // i..
// 4000 #wWd 4500 // if..
// 4500 #wWd 4500
// 4501 f 4000 // if or if..
// 4501 #wWd 4500 // iz..

// All instructions must be sorted by CUR_STATE

// HOW TO USE CHAR PATTERNS
// AB - symbol A or symbol B
// # - symbol '#'
// #AB - any symbol from (macro A + macro B)
// ALL CHAR PATTERNS MUST BE PLACED AFTER ALL SIMPLE CHAR SEQUENCES OF THIS STATE
// For example, this is not allowed: 
//     0 #wW 1
//     0 abc 2

// LEXEME PARSING INSTRUCTIONS:
0 b 5001
0 c 5007
0 d 5022
0 e 5031
0 f 5034
0 i 5039
0 m 5043
0 n 5046
0 o 5048
0 p 5053
0 r 5069
0 s 5074
0 t 5084
0 v 5087
0 w 5095
0 #wWdp 5000
4008 u 5028
4008 #wWdp 5000
5000 #wWdp 5000
5001 o 5002
5001 r 5004
5001 #wWdp 5000
5002 o 5003
5002 #wWdp 5000
5003 l 4000 //bool
5003 #wWdp 5000
5004 e 5005
5004 #wWdp 5000
5005 a 5006
5005 #wWdp 5000
5006 k 4001 //break
5006 #wWdp 5000
5007 a 5008
5007 h 5010
5007 l 5012
5007 o 5016
5007 #wWdp 5000
5008 s 5009
5008 #wWdp 5000
5009 e 4002 //case
5009 #wWdp 5000
5010 a 5011
5010 #wWdp 5000
5011 r 4003 //char
5011 #wWdp 5000
5012 l 5013
5012 #wWdp 5000
5013 a 5014
5013 #wWdp 5000
5014 s 5015
5014 #wWdp 5000
5015 s 4004 //class
5015 #wWdp 5000
5016 n 5017
5016 s 4006 //cos
5016 #wWdp 5000
5017 t 5018
5017 #wWdp 5000
5018 i 5019
5018 #wWdp 5000
5019 n 5020
5019 #wWdp 5000
5020 u 5021
5020 #wWdp 5000
5021 e 4005 //continue
5021 #wWdp 5000
5022 e 5023
5022 o 4008 //do
5022 #wWdp 5000
5023 f 5024
5023 #wWdp 5000
5024 a 5025
5024 #wWdp 5000
5025 u 5026
5025 #wWdp 5000
5026 l 5027
5026 #wWdp 5000
5027 t 4007 //default
5027 #wWdp 5000
5028 b 5029
5028 #wWdp 5000
5029 l 5030
5029 #wWdp 5000
5030 e 4009 //double
5030 #wWdp 5000
5031 l 5032
5031 #wWdp 5000
5032 s 5033
5032 #wWdp 5000
5033 e 4010 //else
5033 #wWdp 5000
5034 a 5035
5034 o 5038
5034 #wWdp 5000
5035 l 5036
5035 #wWdp 5000
5036 s 5037
5036 #wWdp 5000
5037 e 4011 //false
5037 #wWdp 5000
5038 r 4012 //for
5038 #wWdp 5000
5039 f 4013 //if
5039 n 5040
5039 #wWdp 5000
5040 p 5041
5040 t 4015 //int
5040 #wWdp 5000
5041 u 5042
5041 #wWdp 5000
5042 t 4014 //input
5042 #wWdp 5000
5043 a 5044
5043 i 5045
5043 #wWdp 5000
5044 x 4016 //max
5044 #wWdp 5000
5045 n 4017 //min
5045 #wWdp 5000
5046 e 5047
5046 #wWdp 5000
5047 w 4018 //new
5047 #wWdp 5000
5048 u 5049
5048 #wWdp 5000
5049 t 5050
5049 #wWdp 5000
5050 p 5051
5050 #wWdp 5000
5051 u 5052
5051 #wWdp 5000
5052 t 4019 //output
5052 #wWdp 5000
5053 r 5054
5053 u 5065
5053 #wWdp 5000
5054 i 5055
5054 o 5059
5054 #wWdp 5000
5055 v 5056
5055 #wWdp 5000
5056 a 5057
5056 #wWdp 5000
5057 t 5058
5057 #wWdp 5000
5058 e 4020 //private
5058 #wWdp 5000
5059 t 6059
5059 #wWdp 5000
5060 e 5061
5060 #wWdp 5000
5061 c 5062
5061 #wWdp 5000
5062 t 5063
5062 #wWdp 5000
5063 e 5064
5063 #wWdp 5000
5064 d 4021 //protected
5064 #wWdp 5000
5065 b 5066
5065 #wWdp 5000
5066 l 5067
5066 #wWdp 5000
5067 i 5068
5067 #wWdp 5000
5068 c 4022 //public
5068 #wWdp 5000
5069 e 5070
5069 #wWdp 5000
5070 t 5071
5070 #wWdp 5000
5071 u 5072
5071 #wWdp 5000
5072 r 5073
5072 #wWdp 5000
5073 n 4023 //return
5073 #wWdp 5000
5074 i 5075
5074 t 5076
5074 w 5080
5074 #wWdp 5000
5075 n 4024 //sin
5075 #wWdp 5000
5076 r 5077
5076 #wWdp 5000
5077 u 5078
5077 #wWdp 5000
5078 c 5079
5078 #wWdp 5000
5079 t 4025 //struct
5079 #wWdp 5000
5080 i 5081
5080 #wWdp 5000
5081 t 5082
5081 #wWdp 5000
5082 c 5083
5082 #wWdp 5000
5083 h 4026 //switch
5083 #wWdp 5000
5084 r 5085
5084 #wWdp 5000
5085 u 5086
5085 #wWdp 5000
5086 e 4027 //true
5086 #wWdp 5000
5087 i 5088
5087 o 5093
5087 #wWdp 5000
5088 r 5089
5088 #wWdp 5000
5089 t 5090
5089 #wWdp 5000
5090 u 5091
5090 #wWdp 5000
5091 a 6092
5091 #wWdp 5000
5092 l 4028 //virtual
5092 #wWdp 5000
5093 i 5094
5093 #wWdp 5000
5094 d 4029 //void
5094 #wWdp 5000
5095 h 5096
5095 #wWdp 5000
5096 i 5097
5096 #wWdp 5000
5097 l 5098
5097 #wWdp 5000
5098 e 4030 //while
5098 #wWdp 5000