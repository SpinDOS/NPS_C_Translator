// MACROS
// #a - any symbol
#w a z
#W A Z
#o 0 7
#d 0 9
#h a f
#H A F
#n #10 // 10 is \n
#p #95 // 95 is '_'
#z #0 // end of file
// Macros name must consist of 1 char A-Z or a-z

// ADDRESS LAYOUT

// 0 - initial state
// 1 - 99 - errors
// 100 - 199 constants
// 200 - 299 operators
// 300 - 399 keywords
// 400 - 599 variable names
// 600 - 999 common uses 

// Start parsing lexeme from state 0 and jump into your state
// If no matches from current state is found, 
// lexeme will be saved with code of current state 
// and new state is set to 0 

// Use the following format: 
// CUR_STATE MATCH_PATTERN NEW_STATE
// For example: 
// 0 xyz 450
// 0 i 451 // i..
// 351 #wWd 450 // if..
// 450 #wWd 450
// 451 f 351 // if or if..
// 451 #wWd 450 // iz..

// All instructions must be sorted by CUR_STATE

// HOW TO USE CHAR PATTERNS
// AB - symbol A or symbol B
// # - symbol '#'
// #AB - any symbol from (macro A + macro B)
// ALL WIDER CHAR PATTERNS MUST BE PLACED AFTER ALL SMALLER CHAR PATTERNS OF THIS STATE
// For example, this is not allowed: 
//     0 #wW 1
//     0 #w  2
//     0 abc 3

// ERRORS EXPLANATION:
// 10 - unexpected \n inside the string or char constant
// 20 - empty char constant ('')
// 22 - invalid escaped sequence ('\z')
// 23 - invalid escaped character's code
// 30 - numeric constant ends with invalid character
// 31 - mantissa character e is followed by invalid char (123ez)
// 32 - mantissa sign character is followed by invalid char (123e+z)
// 33 - octal number contains invalid characters (0128, 012z);
// 34 - invalid hexadecimal number after 0x (0xz)
// 40 - unexpected end of file (comment is not closed)

// LEXEME PARSING INSTRUCTIONS:

// constants
0 " 101
0 ' 111
0 0 140
0 #d 120

// operations
0 { 200
0 } 201
0 ( 204
0 ) 205
0 [ 206
0 ] 207
0 . 208
0 ! 214
0 ~ 215
0 * 218
0 / 219
0 % 220
0 + 221
0 - 222
0 < 225
0 > 227
0 & 234
0 ^ 237
0 | 236
0 ? 239
0 : 240
0 = 241
0 , 242
0 ; 243

// keywords & var names
0 a 410
0 b 401
0 c 407
0 d 422
0 e 431
0 f 434
0 i 439
0 n 446
0 o 448
0 p 453
0 r 469
0 s 474
0 t 484
0 v 487
0 w 495
0 #wWdp 400

// string constants
101 " 100
101 \ 102
101 #n 10
101 #a 101
102 #a 101

// char constants
111 ' 20
111 \ 113
111 #n 10
111 #a 112
112 ' 110
112 #a 21
113 abtnvfre' 112 // escaped chars
113 #n 111
113 #d 114
113 #a 22
114 #d 114
114 ' 110
114 #a 23

// numberic constants
120 #d 120
120 . 123
120 e 124
120 #wWp 30
120 {[! 30
121 #d 121
121 e 124
121 #wWp 30
121 .{[! 30
122 #d 122
122 #wWp 30
122 .{[! 30
123 #d 121
123 #wWp 30
123 .{[! 30
124 +- 125
124 #d 122
124 #a 31
125 #d 122
125 #a 32

// hex & octal constants
130 #hHd 130
130 #wWp 30
130 .{[! 30
131 #hHd 130
131 #a 34
140 x 131
140 . 123
140 e 124
140 89 33
140 #o 141
140 #wWp 30
140 {[! 30
141 #o 141
141 #wWp 30
141 .{[! 30

// operations
208 #d 121 // .number
214 = 233 // !=
219 / 600 // //
219 * 610 // /*
221 + 202 // ++
222 - 203 // --
222 > 209 // ->
225 = 226 // <=
225 < 223 // <<
227 = 228 // >=
227 > 224 // >>
234 & 235 // &&
236 | 238 // ||
241 = 229 // ==

// keywords
300 #wWdp 400
301 #wWdp 400
302 #wWdp 400
303 #wWdp 400
304 #wWdp 400
305 #wWdp 400
306 #wWdp 400
307 #wWdp 400
308 #wWdp 400
309 #wWdp 400
310 #wWdp 400
311 #wWdp 400
312 #wWdp 400
313 #wWdp 400
314 #wWdp 400
315 #wWdp 400
316 #wWdp 400
317 #wWdp 400
318 #wWdp 400
319 #wWdp 400
320 #wWdp 400
321 #wWdp 400
322 #wWdp 400
323 #wWdp 400
324 #wWdp 400
325 #wWdp 400
326 #wWdp 400
327 #wWdp 400
328 #wWdp 400
329 #wWdp 400
330 #wWdp 400
331 #wWdp 400

// var names
400 #wWdp 400
401 r 404
401 #wWdp 400
402 l 403
402 #wWdp 400
403 l 300 //null
403 #wWdp 400
404 e 405
404 #wWdp 400
405 a 406
405 #wWdp 400
406 k 301 //break
406 #wWdp 400
407 a 408
407 l 412
407 o 416
407 #wWdp 400
408 s 409
408 #wWdp 400
409 e 302 //case
409 #wWdp 400
410 b 411
410 #wWdp 400
411 s 440
411 #wWdp 400
412 l 413
412 #wWdp 400
413 a 414
413 #wWdp 400
414 s 415
414 #wWdp 400
415 s 304 //class
415 #wWdp 400
416 n 417
416 #wWdp 400
417 t 418
417 #wWdp 400
418 i 419
418 #wWdp 400
419 n 420
419 #wWdp 400
420 u 421
420 #wWdp 400
421 e 305 //continue
421 #wWdp 400
422 e 423
422 o 308 //do
422 #wWdp 400
423 f 424
423 l 428
423 #wWdp 400
424 a 425
424 #wWdp 400
425 u 426
425 #wWdp 400
426 l 427
426 #wWdp 400
427 t 307 //default
427 #wWdp 400
428 e 429
428 #wWdp 400
429 t 430
429 #wWdp 400
430 e 309 //delete
430 #wWdp 400
431 l 432
431 #wWdp 400
432 s 433
432 #wWdp 400
433 e 310 //else
433 #wWdp 400
434 a 435
434 o 438
434 #wWdp 400
435 l 436
435 #wWdp 400
436 s 437
436 #wWdp 400
437 e 151 // 311 //false
437 #wWdp 400
438 r 312 //for
438 #wWdp 400
439 f 313 //if
439 #wWdp 400
440 t 441
440 #wWdp 400
441 r 442
441 #wWdp 400
442 a 475
442 #wWdp 400
443 t 444
443 #wWdp 400
444 i 445
444 #wWdp 400
445 c 317 //static
445 #wWdp 400
446 e 447
446 u 402
446 #wWdp 400
447 w 318 //new
447 #wWdp 400
448 p 449
448 #wWdp 400
449 e 450
449 #wWdp 400
450 r 451
450 #wWdp 400
451 a 452
451 #wWdp 400
452 t 499
452 #wWdp 400
453 r 454
453 u 465
453 #wWdp 400
454 i 455
454 o 459
454 #wWdp 400
455 v 456
455 #wWdp 400
456 a 457
456 #wWdp 400
457 t 458
457 #wWdp 400
458 e 320 //private
458 #wWdp 400
459 t 6059
459 #wWdp 400
460 e 461
460 #wWdp 400
461 c 462
461 #wWdp 400
462 t 463
462 #wWdp 400
463 e 464
463 #wWdp 400
464 d 321 //protected
464 #wWdp 400
465 b 466
465 #wWdp 400
466 l 467
466 #wWdp 400
467 i 468
467 #wWdp 400
468 c 322 //public
468 #wWdp 400
469 e 470
469 #wWdp 400
470 t 471
470 #wWdp 400
471 u 472
471 #wWdp 400
472 r 473
472 #wWdp 400
473 n 323 //return
473 #wWdp 400
474 t 476
474 w 480
474 #wWdp 400
475 c 501
475 #wWdp 400
476 r 477
476 a 443
476 #wWdp 400
477 u 478
477 #wWdp 400
478 c 479
478 #wWdp 400
479 t 325 //struct
479 #wWdp 400
480 i 481
480 #wWdp 400
481 t 482
481 #wWdp 400
482 c 483
482 #wWdp 400
483 h 326 //switch
483 #wWdp 400
484 h 502
484 r 485
484 #wWdp 400
485 u 486
485 #wWdp 400
486 e 327 //true
486 #wWdp 400
487 i 488
487 o 493
487 #wWdp 400
488 r 489
488 #wWdp 400
489 t 490
489 #wWdp 400
490 u 491
490 #wWdp 400
491 a 6092
491 #wWdp 400
492 l 328 //virtual
492 #wWdp 400
493 i 494
493 #wWdp 400
494 d 400 // 329 //void
494 #wWdp 400
495 h 496
495 #wWdp 400
496 i 497
496 #wWdp 400
497 l 498
497 #wWdp 400
498 e 330 //while
498 #wWdp 400
499 o 500
499 #wWdp 400
500 r 331 // operator
500 #wWdp 400
501 t 306 //abstract
501 #wWdp 400
502 i 503
502 #wWdp 400
503 s 315 // this
503 #wWdp 400

600 #nz 0
600 #a 600
610 * 611
610 #z 40
610 #a 610
611 / 0
611 #z 40
611 #a 610


